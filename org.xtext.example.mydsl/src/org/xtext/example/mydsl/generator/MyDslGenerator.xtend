/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.generator.trace.node.TracedAccessors
import org.xtext.example.mydsl.myDsl.Model
import org.xtext.example.mydsl.myDsl.MyDslFactory

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
		
	@TracedAccessors(MyDslFactory)
	static class MyDslTraceExtensions {
	}
	
	@Inject
	extension MyDslTraceExtensions

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (model : resource.allContents.filter(Model).toIterable) {
			val name = resource.URI.trimFileExtension.lastSegment
			fsa.generateTracedFile("demo/Greeter_" + name + ".java", model, '''
				package demo;
				
				public class Greeter_«name» {
					public static void main(String[] args) {
						«FOR g : model.greetings»
							System.out.println("«g._name(true)»");
						«ENDFOR»
					}
				}
			''')
		}
	}
}
